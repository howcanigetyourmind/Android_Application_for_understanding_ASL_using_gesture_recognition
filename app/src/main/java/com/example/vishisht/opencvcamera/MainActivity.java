package com.example.vishisht.opencvcamera;

import android.content.Context;
import android.content.pm.ActivityInfo;
import android.hardware.camera2.*;
import android.os.Build;
import android.support.constraint.ConstraintLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.JavaCameraView;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfInt4;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.Moments;


import java.util.ArrayList;
import java.util.List;

import static java.lang.Math.abs;

public class MainActivity extends AppCompatActivity implements CameraBridgeViewBase.CvCameraViewListener2 {

    private static String TAG = "MainActivity";
    JavaCameraView javaCameraView;

    private CameraCaptureSession mSession;
    private CaptureRequest.Builder mBuilder;
    private CameraDevice mCameraDevice;
    private CameraManager mCameraManager;

    static private double[][] values =
            {{165, 286, 198, 184, 146},//A
                    {165, 287, 200, 186, 155},
                    {165, 286, 200, 186, 156},
                    {163, 288, 200, 187, 163},
                    {173, 288, 201, 188},
                    {174, 290, 200, 186},
                    {174, 289, 200, 188, 155},
                    {172, 290, 196, 186},
                    {163, 285, 195, 186, 170, 153},
                    {160, 278, 190, 180, 147},
                    {159, 271, 186, 188, 176, 138},
                    {157, 272, 189, 175, 135},
                    {157, 272, 188, 189, 175, 150},
                    {155, 271, 187, 189, 174, 147},
                    {156, 274, 190, 192, 177, 152},
                    {158, 274, 190, 191, 178, 155},
                    {155, 271, 187, 175, 151},
                    {149, 255, 174, 166, 144},
                    {151, 255, 176, 151, 137},
                    {155, 260, 180, 180, 136},
                    {154, 259, 182, 179},
                    {155, 256, 189, 184, 178, 147},
                    {158, 268, 196, 190, 145},
                    {167, 278, 205, 199, 199, 153},
                    {167, 283, 209, 202, 156},
                    {171, 288, 209, 203, 160},
                    {174, 293, 208, 203, 156},
                    {171, 292, 199, 199, 160},
                    {170, 294, 199, 199, 194, 156},
                    {176, 299, 203, 205, 199, 163},
                    {176, 299, 204, 205, 200, 161},
                    {178, 307, 205, 207, 202, 170},
                    {180, 311, 209, 211, 167},
                    {176, 303, 205, 206, 200, 160},
                    {170, 290, 200, 198, 192, 153},
                    {167, 284, 196, 195, 188, 148},
                    {159, 272, 190, 148},
                    {155, 262, 184, 145},
                    {147, 245, 171, 136},
                    {138, 238, 161, 121},
                    {136, 234, 158, 119},
                    {137, 233, 155, 157, 151, 121},
                    {140, 238, 165, 157, 124},
                    {145, 248, 172, 165, 130},
                    {151, 260, 180, 173, 143},
                    {162, 274, 190, 183, 148},
                    {165, 280, 193, 151},
                    {154, 165, 264, 184, 181, 152},
                    {157, 267, 183, 178, 146},
                    {162, 276, 188, 183, 150},//A

                    {85, 205, 254, 310, 296, 247, 180, 138, 134, 126},//B
                    {84, 225, 269, 330, 320, 268, 197, 146, 120},
                    {86, 225, 264, 322, 308, 262, 238, 134},
                    {89, 218, 260, 318, 302, 257, 132},
                    {82, 193, 236, 292, 277, 234, 211, 118},
                    {99, 172, 214, 264, 247, 201, 104},
                    {98, 175, 212, 262, 245, 199, 172, 104},
                    {99, 175, 213, 264, 248, 200, 104},
                    {99, 173, 211, 262, 250, 200, 103, 104, 111},
                    {99, 173, 214, 263, 245, 199, 174, 104},
                    {98, 170, 212, 262, 250, 200, 177, 103, 104},
                    {97, 169, 211, 262, 244, 198, 102, 104},
                    {106, 170, 204, 257, 240, 193, 102},
                    {102, 168, 208, 258, 242, 195, 173, 104},
                    {106, 167, 209, 257, 240, 195, 170, 104, 112},
                    {102, 164, 205, 257, 241, 194, 99},
                    {104, 171, 207, 256, 240, 193, 99, 103},
                    {109, 170, 207, 232, 257, 244, 194, 99, 103, 112},
                    {102, 169, 208, 257, 240, 195, 102},
                    {98, 166, 204, 253, 236, 192, 167, 97, 98, 106},
                    {97, 160, 205, 250, 238, 188, 96, 96},
                    {93, 168, 204, 251, 236, 191, 96},
                    {88, 157, 195, 242, 227, 184, 91},
                    {83, 154, 190, 235, 220, 178, 159, 86},
                    {76, 154, 182, 224, 211, 173, 86, 82},
                    {75, 153, 224, 215, 175, 156, 86, 81, 78},
                    {74, 158, 191, 232, 219, 180, 88},
                    {79, 160, 192, 238, 224, 184, 91, 87},
                    {84, 161, 197, 242, 227, 186, 163, 93},
                    {86, 167, 198, 248, 234, 189, 169, 96, 95},
                    {87, 158, 199, 250, 234, 192, 96},
                    {89, 167, 203, 253, 237, 195, 98, 97},
                    {90, 165, 203, 253, 238, 195, 99, 98},
                    {92, 166, 203, 258, 240, 194, 174, 99, 99},
                    {93, 169, 208, 261, 245, 198, 101, 101},
                    {93, 175, 211, 265, 249, 203, 102},
                    {93, 172, 209, 265, 254, 202, 183, 103, 103},
                    {95, 168, 210, 237, 268, 256, 205, 104},
                    {113, 175, 216, 277, 263, 205, 183, 115},
                    {114, 179, 220, 246, 278, 260, 206, 187, 112, 114},
                    {119, 173, 216, 276, 262, 204, 178, 119},
                    {123, 178, 219, 247, 277, 260, 204, 179, 113, 120},
                    {125, 179, 221, 281, 261, 207, 184, 115, 119},
                    {134, 182, 226, 254, 288, 269, 212, 186, 120, 131},
                    {136, 191, 228, 263, 294, 279, 215, 124, 134},
                    {147, 189, 227, 260, 291, 271, 214, 190, 124, 133},
                    {164, 193, 225, 291, 269, 211, 124, 136},
                    {159, 186, 226, 257, 288, 273, 209, 181, 123, 136},
                    {156, 139, 185, 222, 254, 285, 270, 206, 179, 120, 1, 132},
                    {152, 182, 217, 247, 280, 262, 205, 181, 118, 127},//B

                    {235, 218, 205, 186, 173, 132, 113, 65},//C
                    {192, 253, 239, 221, 185, 119},
                    {244, 203, 209, 191, 179, 138, 119, 65},
                    {239, 210, 219, 203, 149, 62},
                    {235, 217, 226, 209, 156, 136, 61},
                    {242, 263, 267, 265, 264, 252, 241, 167, 172},
                    {262, 287, 291, 286, 266, 254, 166, 151},
                    {266, 294, 297, 292, 269, 255, 165, 147},
                    {193, 263, 281, 266, 210, 189, 79},
                    {183, 275, 294, 279, 228, 207, 92},
                    {273, 307, 308, 302, 299, 276, 167, 132},
                    {230, 274, 286, 284, 277, 249, 231, 141, 148},
                    {230, 260, 261, 258, 251, 225, 208, 128, 170},
                    {228, 262, 262, 260, 255, 228, 129, 169},
                    {209, 242, 252, 249, 231, 141},
                    {209, 242, 252, 253, 249, 230, 214, 142},
                    {209, 243, 252, 254, 250, 231, 144},
                    {209, 243, 253, 254, 250, 230, 142},
                    {208, 243, 254, 254, 250, 230, 144},
                    {208, 243, 253, 253, 249, 230, 141},
                    {207, 243, 255, 253, 251, 248, 232, 142},
                    {208, 247, 258, 257, 253, 231, 141, 192},
                    {205, 242, 257, 253, 233, 140, 194},
                    {202, 241, 258, 258, 254, 232, 218, 140},
                    {201, 243, 259, 258, 254, 232, 138},
                    {202, 242, 261, 260, 255, 233, 138, 192},
                    {201, 243, 261, 260, 232, 140},
                    {202, 244, 262, 257, 235, 139},
                    {207, 248, 263, 258, 235, 141},
                    {217, 259, 269, 264, 261, 241, 145},
                    {217, 260, 269, 268, 265, 242, 228, 145},
                    {217, 259, 271, 266, 243, 229, 148},
                    {214, 256, 272, 268, 243, 147},
                    {211, 254, 272, 272, 267, 243, 144},
                    {206, 254, 271, 266, 242, 146},
                    {205, 249, 273, 272, 267, 242, 144},
                    {197, 241, 268, 263, 239, 144},
                    {195, 239, 265, 264, 260, 236, 219, 142},
                    {195, 240, 266, 261, 236, 140},
                    {195, 239, 263, 263, 258, 234, 138},
                    {197, 240, 261, 255, 230, 136},
                    {194, 234, 255, 255, 251, 229, 137, 202},
                    {195, 235, 256, 251, 229, 138},
                    {194, 234, 255, 251, 229, 137},
                    {194, 235, 253, 253, 249, 228, 139},
                    {195, 236, 253, 250, 229, 138, 187},
                    {196, 236, 257, 258, 253, 229, 217, 136},
                    {195, 235, 256, 255, 252, 228, 138},
                    {195, 234, 256, 256, 252, 250, 229, 135},
                    {194, 235, 257, 256, 252, 230, 138, 202},//C

                    {115, 303, 156, 140, 119},//D
                    {121, 146, 258, 284, 315, 147, 131, 115},
                    {122, 145, 253, 288, 149, 132, 114},
                    {123, 146, 259, 288, 150, 132, 119},
                    {121, 146, 252, 150, 130, 115},
                    {120, 146, 259, 288, 312, 150, 133, 116},
                    {115, 291, 151, 133, 121},
                    {114, 302, 156, 133, 113},
                    {117, 311, 164, 138, 111},
                    {107, 293, 152, 127, 107},
                    {104, 292, 151, 128, 106},
                    {110, 286, 304, 150, 127, 105},
                    {111, 285, 149, 125, 104},
                    {113, 251, 275, 146, 125, 106},
                    {114, 241, 275, 146, 123, 107},
                    {114, 232, 279, 146, 123, 110, 102},
                    {115, 235, 278, 147, 125, 113},
                    {116, 140, 236, 280, 147, 123, 111},
                    {115, 239, 279, 147, 123, 111},
                    {115, 246, 277, 146, 125, 112},
                    {111, 282, 147, 125, 113},
                    {110, 293, 154, 131, 110},
                    {112, 313, 149, 129},
                    {114, 310, 150, 129, 105},
                    {113, 309, 149, 125},
                    {112, 310, 147, 128, 108},
                    {127, 338, 152, 146, 141, 135},
                    {128, 342, 154, 142, 135},
                    {112, 314, 158, 162, 161, 163},
                    {118, 322, 161, 165, 166},
                    {115, 322, 163, 166, 164, 166},
                    {125, 351, 156, 142, 133, 133},
                    {122, 333, 151, 137, 127},
                    {117, 327, 150, 133, 118, 115},
                    {116, 327, 149, 130, 114},
                    {110, 309, 144, 124, 104},
                    {103, 295, 140, 118, 99},
                    {104, 251, 279, 136, 113, 90},
                    {109, 141, 232, 137, 114, 96},
                    {111, 144, 222, 249, 137, 113, 94},
                    {111, 142, 223, 254, 275, 136, 115, 92},
                    {109, 252, 136, 112, 97},
                    {109, 280, 147, 124, 103},
                    {107, 264, 144, 119},
                    {108, 275, 145, 123, 99},
                    {137, 331, 189, 157, 132},
                    {132, 339, 183, 149, 122},
                    {107, 276, 138, 118, 101},
                    {109, 280, 145, 122, 112},
                    {106, 269, 140, 120, 106},//D

                    {142, 233, 264, 292, 305, 311, 310, 241, 214},//E
                    {137, 162, 225, 250, 296, 303, 302, 231},
                    {138, 164, 229, 255, 310, 309, 216},
                    {141, 168, 234, 255, 314, 313, 240, 218},
                    {150, 172, 233, 269, 297, 317, 317, 241, 217},
                    {154, 175, 246, 268, 319, 318, 238, 220},
                    {114, 172, 190, 228, 229, 165},
                    {116, 172, 196, 232, 233, 170, 138},
                    {112, 179, 233, 230, 166, 146},
                    {114, 179, 232, 229, 178},
                    {114, 181, 197, 230, 228, 166, 142},
                    {114, 180, 221, 229, 228, 177},
                    {112, 180, 196, 228, 227, 167, 146},
                    {103, 169, 226, 228, 189, 146},
                    {121, 167, 190, 226, 229, 183, 165, 149},
                    {122, 165, 223, 226, 176, 161, 147},
                    {118, 124, 164, 217, 221, 181, 164, 146},
                    {127, 128, 166, 187, 214, 220, 225, 183, 154},
                    {135, 172, 190, 223, 231, 188, 168, 157},
                    {146, 179, 195, 230, 238, 189, 172},
                    {165, 184, 201, 234, 243, 198, 175},
                    {169, 187, 205, 236, 237, 248, 200, 188, 174},
                    {171, 187, 206, 237, 249, 203, 188, 181},
                    {173, 188, 203, 229, 236, 247, 202, 186},
                    {154, 182, 197, 228, 232, 182, 172},
                    {130, 170, 184, 212, 212, 153, 143},
                    {112, 151, 170, 190, 207, 205, 145, 131},
                    {111, 152, 182, 208, 206, 149, 131},
                    {104, 145, 169, 203, 200, 143, 124},
                    {101, 137, 183, 180, 130, 113},
                    {102, 145, 164, 180, 176, 130, 112},
                    {103, 134, 147, 178, 184, 181, 136, 119},
                    {103, 149, 162, 187, 184, 137, 119},
                    {103, 147, 189, 186, 136, 123},
                    {106, 147, 173, 189, 197, 193, 141, 127},
                    {106, 147, 199, 195, 143, 124},
                    {109, 147, 165, 203, 198, 147},
                    {113, 168, 190, 217, 213, 158, 142},
                    {120, 168, 184, 233, 229, 169},
                    {120, 186, 201, 236, 232, 173, 158},
                    {120, 183, 235, 231, 173, 144},
                    {118, 178, 230, 225, 168},
                    {115, 171, 224, 219, 165, 148},
                    {115, 174, 188, 221, 215, 183, 162},
                    {112, 162, 211, 206, 155, 132},
                    {111, 157, 209, 204, 155},
                    {105, 153, 196, 192, 145, 132},
                    {109, 158, 178, 206, 202, 153, 140},
                    {107, 152, 204, 198, 149},
                    {105, 156, 200, 196, 147},//E

                    {136, 306, 296, 250, 148},//F
                    {169, 260, 246, 197, 174, 106, 102},
                    {138, 301, 292, 245, 142, 127},
                    {168, 163, 262, 248, 201, 178, 105, 101},
                    {137, 302, 291, 248, 143, 126},
                    {167, 261, 246, 202, 106, 99},
                    {165, 262, 249, 203, 174, 107, 101},
                    {166, 266, 252, 205, 100},
                    {160, 266, 254, 205, 108, 102},
                    {156, 265, 254, 203, 108},
                    {150, 266, 256, 204, 108, 100},
                    {145, 266, 250, 199, 180, 108, 100},
                    {139, 268, 252, 202, 106, 99},
                    {140, 156, 271, 254, 203, 180, 101, 95},
                    {146, 154, 155, 265, 257, 207, 184, 92},
                    {152, 152, 264, 256, 206, 183, 92},
                    {160, 139, 268, 259, 208, 93},
                    {158, 138, 267, 256, 208, 184, 95},
                    {160, 138, 263, 254, 207, 94},
                    {159, 136, 261, 253, 207, 93},
                    {159, 137, 267, 252, 206, 101},
                    {157, 138, 262, 254, 207, 102},
                    {158, 136, 267, 252, 206, 186, 103, 95},
                    {159, 137, 266, 253, 207, 94},
                    {157, 137, 260, 251, 205, 100, 93},
                    {157, 137, 267, 257, 205, 184, 94},
                    {152, 138, 261, 254, 204, 183, 104, 95},
                    {141, 141, 134, 264, 250, 203, 184, 103, 96},
                    {141, 141, 133, 270, 250, 203, 181, 101, 93},
                    {141, 145, 264, 251, 204, 102, 97},
                    {144, 272, 253, 203, 105, 96},
                    {141, 148, 267, 252, 204, 182, 106, 98},
                    {143, 267, 253, 207, 184, 105, 96},
                    {143, 150, 266, 253, 207, 186, 106, 97},
                    {143, 264, 252, 206, 182, 105, 98},
                    {128, 141, 263, 253, 198, 102, 95},
                    {127, 141, 262, 246, 195, 177, 101, 94},
                    {127, 139, 262, 247, 196, 102, 95},
                    {127, 136, 155, 269, 250, 199, 177, 100, 94},
                    {126, 136, 157, 268, 251, 199, 101, 94},
                    {128, 137, 157, 266, 253, 200, 176, 102, 95},
                    {134, 137, 148, 264, 250, 198, 101, 93},
                    {136, 138, 145, 266, 250, 195, 173, 101, 94},
                    {138, 141, 139, 264, 248, 195, 99, 92},
                    {139, 139, 138, 260, 246, 192, 174, 98},
                    {138, 139, 139, 262, 248, 196, 172, 99, 92},
                    {138, 140, 137, 262, 247, 195, 100, 92},
                    {140, 140, 138, 265, 251, 200, 178, 100, 94},
                    {140, 122, 235, 225, 178, 156, 96},
                    {141, 136, 126, 248, 227, 181, 159, 95, 92},//F

                    {212, 176, 113, 121, 197, 274, 116, 104},//G
                    {274, 215, 111, 86, 141, 218, 239, 123, 138},
                    {274, 215, 110, 86, 84, 144, 217, 239, 124, 136},
                    {271, 213, 109, 85, 83, 144, 206, 124, 136},
                    {269, 213, 115, 81, 140, 201, 128, 139},
                    {270, 213, 113, 86, 82, 141, 214, 234, 126, 140},
                    {255, 202, 106, 92, 155, 226, 244, 118, 124},
                    {248, 198, 106, 92, 151, 229, 116, 121},
                    {239, 189, 103, 98, 168, 240, 258, 114, 115},
                    {242, 192, 102, 98, 164, 233, 114, 114},
                    {247, 195, 100, 100, 170, 242, 113, 110},
                    {249, 194, 98, 105, 166, 242, 261, 113, 108},
                    {243, 190, 99, 106, 183, 249, 113, 104},
                    {166, 88, 108, 185, 253, 119, 103},
                    {162, 86, 114, 184, 250, 116, 100},
                    {160, 84, 105, 183, 240, 115, 98},
                    {162, 86, 111, 189, 249, 118},
                    {168, 90, 114, 197, 254, 122},
                    {265, 196, 82, 98, 165, 220, 108, 99},
                    {277, 210, 85, 86, 148, 206, 104, 105},
                    {282, 218, 90, 79, 140, 196, 108, 117},
                    {220, 171, 108, 141, 218, 277, 130, 104},
                    {292, 226, 94, 87, 151, 225, 243, 113, 117},
                    {297, 229, 95, 87, 153, 222, 113, 118},
                    {278, 215, 94, 101, 168, 234, 110, 105},
                    {173, 89, 123, 198, 265, 126},
                    {170, 89, 113, 195, 250, 123, 103},
                    {169, 88, 119, 195, 254, 122, 101},
                    {169, 88, 113, 193, 262, 124},
                    {172, 90, 125, 197, 257, 275, 121},
                    {170, 90, 115, 194, 264, 124},
                    {170, 89, 120, 190, 258, 123, 103},
                    {174, 90, 125, 200, 264, 127},
                    {250, 176, 92, 128, 204, 265, 127},
                    {174, 91, 114, 195, 262, 120},
                    {221, 172, 82, 110, 198, 252, 273, 117},
                    {219, 171, 81, 106, 199, 259, 117},
                    {169, 80, 99, 200, 277, 118},
                    {236, 190, 77, 80, 162, 220, 250, 110},
                    {214, 168, 79, 97, 186, 274, 116},
                    {224, 173, 81, 113, 197, 258, 119},
                    {174, 83, 114, 193, 252, 120},
                    {230, 174, 83, 114, 193, 263, 121},
                    {176, 84, 114, 190, 259, 120},
                    {255, 202, 85, 98, 165, 227, 257, 108},
                    {265, 206, 84, 100, 159, 239, 258, 112},
                    {264, 205, 84, 102, 162, 226, 111},
                    {257, 200, 81, 97, 175, 241, 113},
                    {256, 199, 81, 98, 173, 236, 114},
                    {250, 199, 79, 93, 166, 236, 112},//G

                    {200, 94, 90, 95, 163, 222, 272, 114},//H
                    {197, 94, 90, 93, 160, 215, 242, 265, 112},
                    {233, 202, 92, 90, 93, 160, 222, 245, 270, 111},
                    {200, 93, 94, 162, 220, 269, 111},
                    {200, 94, 91, 94, 157, 221, 243, 269, 109},
                    {241, 198, 93, 96, 162, 215, 268, 106},
                    {244, 198, 169, 92, 96, 164, 213, 268, 102},
                    {197, 91, 99, 165, 213, 271, 99},
                    {248, 196, 173, 90, 101, 167, 220, 272, 98},
                    {198, 179, 149, 90, 102, 173, 214, 242, 274, 93},
                    {196, 169, 118, 90, 103, 168, 220, 277, 87},
                    {195, 171, 116, 90, 100, 167, 220, 243, 277},
                    {196, 171, 119, 90, 103, 174, 220, 276},
                    {194, 130, 90, 100, 167, 214, 273, 87},
                    {196, 178, 134, 91, 100, 168, 217, 273, 89, 89},
                    {196, 173, 91, 97, 166, 213, 273, 93},
                    {197, 178, 132, 92, 97, 166, 214, 271, 93},
                    {198, 136, 93, 99, 167, 217, 275, 94},
                    {245, 200, 177, 154, 94, 98, 164, 216, 245, 275, 1, 98},
                    {243, 202, 93, 94, 166, 219, 248, 280, 104},
                    {244, 205, 183, 93, 96, 162, 224, 251, 278, 106},
                    {203, 94, 91, 96, 163, 224, 247, 277, 105},
                    {243, 204, 95, 96, 166, 219, 278, 104},
                    {199, 142, 92, 90, 95, 159, 215, 274, 101},
                    {197, 92, 94, 160, 212, 271, 99},
                    {195, 157, 89, 93, 162, 214, 266, 95},
                    {195, 153, 123, 87, 94, 162, 215, 267, 93},
                    {192, 164, 115, 88, 99, 166, 213, 239, 270},
                    {191, 114, 91, 103, 164, 212, 273},
                    {251, 191, 168, 116, 92, 102, 170, 216, 274},
                    {192, 116, 93, 102, 167, 218, 277},
                    {251, 193, 168, 120, 93, 101, 170, 216, 275},
                    {193, 168, 117, 93, 103, 170, 216, 276},
                    {192, 120, 85, 94, 159, 212, 237, 267},
                    {237, 192, 164, 147, 121, 86, 95, 160, 211, 264, 1, 90},
                    {192, 128, 86, 158, 209, 266, 94},
                    {234, 192, 129, 86, 160, 216, 267, 96},
                    {233, 194, 125, 85, 93, 154, 214, 265, 98},
                    {194, 126, 86, 93, 156, 211, 265, 98},
                    {236, 196, 129, 87, 87, 93, 157, 208, 267, 100},
                    {203, 123, 87, 95, 166, 222, 249, 278, 99},
                    {195, 130, 88, 93, 151, 215, 267, 100},
                    {201, 171, 150, 129, 89, 95, 157, 217, 241, 271, 1, 101},
                    {192, 130, 87, 147, 202, 263, 98},
                    {192, 135, 89, 90, 149, 203, 262, 98},
                    {189, 129, 87, 90, 150, 207, 231, 262, 98},
                    {194, 172, 121, 86, 86, 93, 153, 208, 233, 265, 1, 98},
                    {192, 161, 120, 84, 92, 154, 208, 264, 97},
                    {190, 161, 115, 83, 85, 93, 157, 205, 261, 94},
                    {191, 119, 84, 85, 92, 154, 208, 260, 95},//H

                    {105, 181, 365, 329},//I
                    {111, 165, 193, 366, 338, 304},
                    {111, 167, 197, 366, 335},
                    {109, 161, 191, 360, 308},
                    {154, 201, 228, 373, 182},
                    {152, 202, 225, 373, 179, 152},
                    {156, 228, 377, 166},
                    {142, 167, 294},
                    {137, 163, 291},
                    {136, 163, 287, 99},
                    {137, 166, 287, 133, 107},
                    {135, 166, 283, 256, 138},
                    {135, 166, 284, 144, 105},
                    {135, 165, 286, 143, 107, 92},
                    {135, 162, 281, 260, 141, 92},
                    {135, 160, 285, 142, 91},
                    {135, 161, 285, 258, 137, 106, 91},
                    {138, 159, 290, 95, 87},
                    {138, 160, 169, 292},
                    {138, 161, 291},
                    {137, 159, 290},
                    {135, 158, 287, 110, 87},
                    {135, 160, 283, 261, 129, 105},
                    {134, 160, 284, 259, 142, 106},
                    {134, 161, 284, 141, 110},
                    {139, 162, 289, 144, 92},
                    {134, 161, 283, 144, 109, 90},
                    {136, 159, 289, 97, 86},
                    {136, 161, 293},
                    {136, 162, 171, 293},
                    {137, 160, 294},
                    {135, 159, 286, 101},
                    {133, 164, 287, 145, 108},
                    {134, 165, 287, 260, 145, 113, 89},
                    {141, 166, 290, 259, 149, 89},
                    {134, 165, 289, 258, 149, 112, 92},
                    {134, 149, 163, 269, 135, 104},
                    {134, 142, 151, 165, 276, 251, 138, 110},
                    {136, 165, 289, 264, 146, 111, 88},
                    {141, 166, 290, 259, 149, 89},
                    {134, 165, 289, 258, 149, 112, 92},
                    {135, 166, 291, 263, 150, 89},
                    {139, 162, 282, 252, 144, 106, 91},
                    {138, 160, 168, 292},
                    {138, 161, 291},
                    {137, 159, 290},
                    {135, 158, 287, 110, 87},
                    {135, 160, 283, 261, 129, 105},
                    {134, 161, 284, 141, 110},
                    {133, 160, 283, 142, 105},//I

                    {211, 301, 156, 143},//L
                    {208, 295, 156, 143},
                    {206, 296, 157, 142, 129},
                    {208, 295, 156, 143, 126},
                    {210, 295, 157, 144},
                    {210, 294, 159, 127},
                    {211, 299, 158, 145, 124},
                    {209, 301, 158, 145, 126},
                    {213, 301, 159, 122},
                    {212, 294, 158, 144, 123},
                    {210, 297, 158, 144, 133, 119},
                    {208, 294, 157},
                    {202, 290, 157, 141, 123},
                    {198, 284, 155, 119},
                    {191, 273, 151, 116},
                    {191, 271, 151, 114},
                    {191, 270, 154, 137, 117},
                    {189, 270, 154, 122},
                    {189, 268, 153},
                    {188, 268, 152, 116},
                    {202, 290, 158, 142, 125},
                    {212, 304, 163, 147, 130},
                    {269, 395, 241, 215, 189},
                    {223, 320, 168, 152, 137, 126},
                    {224, 321, 169, 152, 136},
                    {222, 317, 166, 151, 127},
                    {221, 316, 165, 128},
                    {218, 298, 154, 143},
                    {219, 302, 155, 132},
                    {223, 305, 155, 148},
                    {223, 302, 156, 148, 139},
                    {228, 308, 158, 152, 141},
                    {227, 306, 156, 152, 147, 143},
                    {223, 304, 155, 150, 139},
                    {215, 296, 150, 144, 133},
                    {211, 295, 152, 144, 130},
                    {209, 291, 151, 140, 123},
                    {210, 295, 155, 122},
                    {192, 267, 145, 111},
                    {185, 259, 140},
                    {181, 250, 133},
                    {209, 301, 160, 146, 124},
                    {213, 301, 159, 122},
                    {212, 294, 158, 144, 123},
                    {210, 297, 158, 144, 133, 119},
                    {208, 294, 157},
                    {195, 277, 151, 115},
                    {192, 267, 145, 111},
                    {175, 249, 130, 108},
                    {209, 301, 160, 146, 124},//L

                    {224, 281, 288, 266, 240},//M
                    {220, 283, 301, 287, 267, 238},
                    {216, 276, 296, 281, 260, 231},
                    {160, 185, 226, 223, 199, 174},
                    {161, 185, 225, 226, 203, 175, 159},
                    {164, 188, 210, 228, 231, 205, 180, 141},
                    {161, 174, 213, 236, 237, 211, 184},
                    {163, 176, 214, 237, 250, 236, 210, 183, 144},
                    {161, 174, 189, 216, 234, 250, 237, 209, 184, 143},
                    {159, 189, 218, 239, 260, 242, 217, 193},
                    {183, 207, 231, 254, 248, 220, 193},
                    {185, 208, 231, 256, 263, 249, 220, 193},
                    {185, 230, 247, 248, 220, 193},
                    {179, 224, 245, 216, 190, 175},
                    {163, 178, 227, 236, 209, 187, 146},
                    {174, 188, 208, 233, 234, 209, 184, 147},
                    {154, 180, 201, 224, 249, 226, 199, 180, 147},
                    {161, 193, 221, 238, 260, 239, 207, 183, 146},
                    {161, 187, 211, 239, 259, 238, 205, 183},
                    {159, 208, 223, 236, 236, 206, 183},
                    {156, 170, 188, 208, 234, 251, 235, 207, 184},
                    {152, 164, 186, 202, 215, 229, 248, 233, 205, 182},
                    {154, 176, 203, 248, 233, 204, 181},
                    {152, 172, 206, 231, 204, 181},
                    {151, 168, 179, 199, 225, 246, 228, 199, 178},
                    {153, 185, 204, 227, 229, 200, 177},
                    {158, 185, 204, 233, 252, 228, 196, 168},
                    {159, 194, 204, 230, 253, 228, 196, 162},
                    {163, 211, 234, 230, 197, 162},
                    {161, 199, 212, 236, 233, 197, 160},
                    {158, 193, 211, 235, 256, 234, 198, 164},
                    {164, 192, 214, 238, 257, 235, 200, 169},
                    {162, 188, 217, 237, 235, 202, 169},
                    {166, 190, 213, 237, 252, 235, 202, 170},
                    {165, 188, 220, 238, 234, 202, 171},
                    {157, 174, 191, 206, 231, 228, 196, 168},
                    {151, 180, 202, 226, 224, 193, 166},
                    {146, 163, 172, 188, 203, 218, 218, 188, 163},
                    {158, 201, 224, 222, 188, 162},
                    {158, 184, 204, 214, 232, 246, 227, 195, 165},
                    {158, 179, 207, 228, 225, 194, 164},
                    {144, 160, 178, 191, 214, 213, 183, 157},
                    {136, 158, 183, 200, 196, 169, 145},
                    {139, 148, 161, 175, 197, 200, 175, 150},
                    {144, 167, 196, 216, 215, 185, 160},
                    {148, 159, 170, 182, 194, 218, 216, 186, 160},
                    {143, 156, 184, 208, 206, 178, 153},
                    {137, 178, 203, 199, 172, 149},
                    {137, 179, 202, 198, 172, 149, 115},
                    {135, 158, 178, 201, 199, 173, 149, 139},//M

                    {59, 22, 97, 78, 116},//P
                    {60, 26, 88, 89, 108},
                    {193, 160, 144, 101, 238, 195},
                    {192, 207, 210, 98, 245, 194},
                    {194, 182, 95, 238},
                    {188, 168, 163, 150, 99, 93, 209, 189},
                    {188, 165, 158, 148, 95, 206, 188},
                    {182, 162, 130, 118, 97, 229, 184},
                    {184, 179, 112, 99, 245, 188},
                    {235, 161, 147, 135, 343, 342, 240},
                    {238, 145, 128, 94, 146, 341, 339},
                    {192, 199, 187, 165, 106, 270, 196},
                    {182, 191, 158, 104, 256},
                    {185, 218, 192, 181, 154, 105, 259, 187},
                    {183, 193, 178, 154, 107, 261},
                    {183, 194, 149, 109, 267, 187},
                    {182, 195, 174, 150, 103, 262, 187},
                    {184, 221, 193, 151, 104, 262},
                    {184, 197, 184, 167, 150, 112, 266, 187},
                    {182, 198, 185, 145, 113, 266},
                    {222, 134, 117, 158, 342, 345, 227},
                    {217, 135, 116, 106, 158, 345, 343},
                    {179, 200, 181, 163, 144, 116, 269},
                    {181, 202, 169, 144, 117, 270, 183},
                    {183, 226, 198, 171, 154, 109, 269, 186},
                    {187, 198, 161, 113, 266},
                    {192, 216, 202, 111, 262, 193},
                    {190, 214, 199, 182, 111, 271},
                    {189, 216, 198, 178, 112, 264, 192},
                    {185, 196, 166, 107, 264, 188},
                    {176, 218, 196, 181, 149, 114, 259},
                    {175, 193, 172, 143, 114, 256},
                    {175, 193, 161, 144, 113, 256, 178},
                    {174, 192, 148, 108, 255},
                    {174, 193, 172, 140, 116, 254, 175},
                    {157, 185, 136, 114, 107, 237, 162},
                    {218, 180, 120, 97, 82, 115, 227, 151},
                    {218, 179, 143, 126, 109, 237, 159},
                    {174, 212, 183, 108, 248, 178},
                    {177, 223, 191, 173, 118, 256},
                    {171, 221, 187, 168, 147, 116, 249},
                    {172, 186, 170, 143, 115, 249},
                    {180, 203, 184, 155, 131, 109, 235, 184},
                    {174, 205, 189, 167, 107, 229, 179},
                    {201, 146, 131, 114, 141, 287, 212},
                    {169, 196, 183, 147, 108, 229},
                    {199, 144, 128, 95, 141, 288},
                    {204, 146, 128, 92, 143, 291, 210},
                    {168, 183, 177, 132, 103, 217, 173},
                    {165, 185, 177, 130, 102, 213},//P

                    {226, 209, 188, 164, 164},//Q
                    {240, 208, 126, 143},
                    {215, 198, 179, 156, 105, 164},
                    {78, 149, 198, 213, 239},
                    {278, 126, 131, 149, 164, 178, 276, 373},
                    {278, 135, 136, 146, 155, 165, 265, 368},
                    {129, 130, 140, 166, 264, 351, 261},
                    {141, 142, 149, 153, 244, 335, 250},
                    {206, 183, 166, 145, 192, 272},
                    {203, 184, 184, 143, 187, 271, 217},
                    {200, 178, 178, 141, 187, 265},
                    {198, 176, 155, 138, 181, 260, 207},
                    {208, 196, 178, 155, 137, 180, 259},
                    {214, 222, 196, 190, 160, 134, 164, 249},
                    {206, 194, 176, 154, 134, 178, 258},
                    {198, 173, 155, 186, 261, 205},
                    {199, 173, 156, 140, 185, 260, 205},
                    {201, 173, 154, 189, 264},
                    {201, 173, 156, 141, 190, 262},
                    {200, 171, 152, 183, 258, 203},
                    {199, 170, 152, 182, 258},
                    {195, 162, 146, 182, 249},
                    {194, 164, 148, 176, 249, 195},
                    {202, 193, 173, 152, 171, 252},
                    {206, 194, 177, 152, 168, 253},
                    {205, 195, 174, 149, 171, 251},
                    {205, 195, 175, 152, 170, 253},
                    {203, 195, 172, 150, 132, 176, 254},
                    {201, 194, 172, 149, 174, 253},
                    {202, 194, 174, 148, 169, 249},
                    {285, 195, 166, 135, 177, 251, 196},
                    {200, 192, 169, 146, 170, 249},
                    {204, 216, 192, 185, 151, 129, 158, 244},
                    {202, 188, 181, 155, 126, 157, 242},
                    {190, 166, 146, 172, 246, 196},
                    {187, 158, 138, 173, 238},
                    {269, 181, 156, 164, 232},
                    {175, 147, 127, 164, 223},
                    {175, 141, 175, 221},
                    {256, 169, 149, 131, 157, 217},
                    {242, 168, 153, 136, 116, 152, 215, 173},
                    {190, 174, 172, 168, 122, 156, 231},
                    {197, 180, 176, 126, 157, 241},
                    {200, 181, 178, 151, 127, 160, 243},
                    {202, 184, 179, 130, 159, 246},
                    {199, 186, 173, 150, 130, 169, 248},
                    {187, 170, 148, 129, 167, 241, 195},
                    {199, 183, 176, 126, 158, 238},
                    {195, 177, 174, 144, 122, 151, 234},
                    {194, 178, 173, 146, 152, 233},//Q

                    {160, 382, 364, 213, 180},//R
                    {146, 366, 344, 197, 174, 144},
                    {147, 363, 339, 193, 132},
                    {149, 364, 340, 195, 163},
                    {147, 357, 333, 189, 157, 137},
                    {148, 360, 335, 192, 172},
                    {143, 351, 329, 189, 158},
                    {142, 352, 328, 185, 151},
                    {145, 349, 326, 184, 150},
                    {81, 275, 249, 129, 110},
                    {82, 273, 249, 128, 116},
                    {141, 343, 319, 180, 156, 140},
                    {82, 273, 248, 127, 111, 103},
                    {100, 289, 266, 129, 101},
                    {101, 284, 261, 130, 115, 96},
                    {100, 286, 260, 130, 107},
                    {103, 286, 261, 129, 101},
                    {104, 283, 258, 129, 108, 94},
                    {106, 283, 261, 130, 109, 95},
                    {105, 283, 259, 130, 98},
                    {105, 279, 260, 128, 107, 92},
                    {104, 277, 254, 125, 95},
                    {92, 256, 237, 119, 102, 91},
                    {94, 260, 236, 120, 93},
                    {95, 261, 240, 123, 100, 91},
                    {98, 270, 248, 128, 109, 97},
                    {112, 288, 263, 135, 100},
                    {145, 304, 290, 169, 140},
                    {132, 311, 292, 166, 138, 123},
                    {134, 318, 294, 167, 144, 125},
                    {137, 327, 308, 175, 141},
                    {103, 292, 264, 127, 111},
                    {104, 285, 262, 128, 106, 91},
                    {105, 288, 263, 128, 107, 84},
                    {101, 288, 264, 127, 108},
                    {121, 287, 257, 140, 122, 100},
                    {123, 290, 258, 142, 99},
                    {119, 284, 257, 140, 121, 105},
                    {103, 280, 255, 124, 107},
                    {106, 275, 255, 128, 105, 80},
                    {108, 280, 257, 130, 79},
                    {109, 282, 260, 131, 116},
                    {110, 280, 265, 132},
                    {138, 320, 303, 167},
                    {108, 284, 260, 132, 115, 80},
                    {105, 287, 262, 128, 106},
                    {97, 274, 250, 116, 100},
                    {101, 285, 257, 122},
                    {94, 275, 249, 116, 99},
                    {98, 284, 257, 122, 102},//R

                    {68, 143, 245, 266, 326, 361, 393, 53},//U
                    {73, 142, 246, 266, 323, 389, 51},
                    {76, 144, 244, 265, 295, 323, 385, 49},
                    {110, 250, 322, 381, 247, 160, 125, 106},
                    {120, 253, 331, 389, 163, 126, 103},
                    {110, 251, 326, 353, 385, 247, 156, 121},
                    {122, 252, 334, 385, 248, 154, 121},
                    {123, 260, 282, 333, 387, 251, 157, 123, 105},
                    {92, 167, 206, 238, 292, 165, 106, 103},
                    {95, 173, 236, 291, 166, 105, 102},
                    {95, 92, 170, 188, 236, 267, 282, 162, 103, 101},
                    {97, 166, 230, 280, 154, 100, 99},
                    {97, 171, 210, 234, 282, 158, 103, 102},
                    {101, 190, 279, 159, 104, 100, 107},
                    {102, 196, 235, 261, 278, 157, 103, 100, 106},
                    {98, 190, 235, 276, 156, 102, 100},
                    {96, 91, 168, 188, 230, 273, 154, 99, 97},
                    {98, 93, 171, 232, 274, 155, 100, 97},
                    {101, 191, 232, 274, 154, 100, 97},
                    {102, 188, 227, 273, 156, 102, 97, 103},
                    {100, 166, 187, 228, 256, 270, 153, 99, 96},
                    {99, 188, 233, 257, 275, 156, 103, 98},
                    {100, 187, 233, 275, 158, 103, 98},
                    {100, 196, 231, 259, 275, 160, 103, 98, 105},
                    {101, 97, 168, 188, 228, 274, 155, 101, 97},
                    {107, 102, 196, 245, 290, 162, 107, 105},
                    {114, 193, 247, 297, 162, 110, 108},
                    {113, 108, 194, 250, 299, 163, 111, 108},
                    {104, 99, 191, 236, 281, 157, 101, 99},
                    {94, 174, 235, 274, 160, 98, 92},
                    {88, 175, 266, 162, 100, 85},
                    {87, 178, 264, 162, 97, 82},
                    {86, 167, 186, 222, 247, 260, 155, 96, 83},
                    {83, 168, 187, 224, 262, 157, 95, 81},
                    {77, 174, 263, 163, 97, 84},
                    {80, 170, 192, 224, 264, 164, 97, 83},
                    {85, 176, 227, 265, 165, 98, 82},
                    {90, 175, 194, 225, 263, 170, 108},
                    {89, 170, 189, 222, 260, 169, 103, 88},
                    {89, 174, 258, 169, 101, 88},
                    {89, 170, 223, 257, 167, 101},
                    {90, 179, 265, 172, 106, 90},
                    {90, 183, 203, 233, 267, 177, 109, 93},
                    {89, 200, 233, 268, 177, 109},
                    {95, 198, 263, 179, 111, 94},
                    {95, 197, 229, 266, 178, 112},
                    {93, 199, 229, 267, 177, 111, 93},
                    {89, 192, 268, 177, 105, 88},
                    {88, 184, 230, 267, 178, 106, 90},
                    {89, 176, 194, 230, 266, 177, 105, 90},//U

                    {160, 153, 283, 313, 134, 140},//V
                    {157, 282, 313, 146, 134},
                    {156, 283, 314, 145, 135, 140},
                    {150, 281, 311, 144, 134},
                    {127, 321, 361, 183, 134, 129},
                    {156, 239, 272, 309, 145, 133, 139},
                    {156, 235, 308, 144, 133},
                    {137, 286, 356, 176, 124},
                    {137, 286, 315, 356, 172, 124, 120},
                    {136, 285, 354, 174, 124},
                    {143, 268, 312, 152, 131},
                    {142, 243, 262, 312, 154, 132},
                    {153, 137, 286, 315, 151, 129},
                    {143, 278, 315, 151, 129},
                    {152, 137, 281, 314, 153, 129},
                    {150, 134, 275, 310, 153, 125},
                    {150, 134, 267, 310, 154, 125, 129},
                    {149, 134, 245, 264, 310, 153, 125},
                    {151, 135, 248, 272, 310, 154, 125, 128},
                    {150, 136, 243, 275, 312, 154, 124},
                    {147, 132, 247, 272, 312, 153, 129, 131, 140},
                    {146, 132, 250, 268, 310, 155, 129, 140},
                    {146, 136, 243, 261, 307, 160, 128},
                    {146, 132, 243, 270, 311, 156, 128},
                    {149, 134, 273, 310, 153, 127},
                    {149, 135, 249, 274, 313, 152, 129},
                    {147, 133, 249, 273, 313, 153, 129},
                    {148, 134, 248, 273, 313, 154, 129, 132},
                    {145, 135, 245, 310, 159, 129, 140},
                    {145, 133, 273, 311, 154, 129, 140},
                    {146, 133, 277, 316, 155, 129, 131, 139},
                    {145, 130, 276, 315, 157, 129, 139},
                    {144, 129, 290, 319, 159, 128, 139},
                    {143, 134, 129, 289, 320, 159, 129, 131, 140},
                    {143, 129, 288, 320, 158, 128, 130, 140},
                    {143, 126, 286, 318, 168, 126, 138},
                    {139, 126, 252, 270, 319, 170, 127, 138},
                    {140, 126, 270, 318, 170, 127, 137},
                    {129, 286, 322, 160, 128, 139},
                    {141, 130, 287, 323, 159, 129, 139},
                    {150, 135, 283, 318, 161, 131, 135, 144},
                    {144, 132, 276, 318, 163, 127},
                    {156, 239, 272, 309, 145, 133, 139},
                    {156, 235, 308, 144, 133},
                    {155, 241, 261, 309, 142, 132, 138},
                    {149, 236, 309, 146, 132},
                    {156, 239, 310, 144, 132, 138},
                    {149, 236, 308, 144, 132},
                    {147, 238, 311, 144, 132, 137},
                    {127, 321, 361, 183, 134, 129},//V

                    {244, 265, 268, 263, 117},//W
                    {266, 268, 266, 114, 131},
                    {235, 262, 269, 267, 114, 130},
                    {270, 274, 272, 115, 128},
                    {281, 285, 283, 116, 122},
                    {270, 271, 268, 114},
                    {115, 242, 268, 270, 267, 113, 114},
                    {117, 248, 267, 269, 266, 112},
                    {124, 250, 267, 263, 111},
                    {124, 251, 266, 263, 110, 112},
                    {126, 266, 266, 263, 110},
                    {109, 257, 281, 284, 283, 115, 119},
                    {106, 296, 298, 296, 115},
                    {107, 282, 284, 283, 113, 116},
                    {282, 282, 281, 112, 117},
                    {109, 280, 281, 280, 110},
                    {110, 279, 281, 279, 109, 107, 114},
                    {114, 277, 282, 280, 111, 108},
                    {108, 276, 277, 275, 106, 102},
                    {99, 269, 276, 274, 104, 97},
                    {276, 283, 279, 111, 97},
                    {262, 276, 272, 105},
                    {257, 267, 263, 101, 87},
                    {250, 264, 261, 96},
                    {95, 249, 263, 259, 94},
                    {104, 257, 261, 259, 98, 95},
                    {115, 268, 268, 267, 103, 102, 111},
                    {115, 270, 270, 269, 103, 102},
                    {117, 269, 272, 272, 106, 105, 114},
                    {99, 304, 315, 316, 125, 115},
                    {108, 304, 313, 314, 129, 120, 123},
                    {106, 318, 333, 333, 133, 125},
                    {109, 320, 332, 333, 135, 129, 129},
                    {118, 308, 321, 323, 136, 132, 137},
                    {123, 311, 325, 326, 137, 135},
                    {150, 285, 283, 281, 117, 126, 140},
                    {138, 283, 286, 285, 119, 122, 138},
                    {140, 279, 282, 281, 114, 121},
                    {112, 274, 278, 276, 107, 107},
                    {103, 263, 268, 266, 100, 99},
                    {100, 262, 267, 264, 96, 94},
                    {250, 255, 252, 93, 87},
                    {89, 246, 252, 249, 93, 87},
                    {91, 251, 256, 253, 96},
                    {281, 285, 283, 116, 122},
                    {270, 271, 268, 114},
                    {115, 242, 268, 270, 267, 113, 114},
                    {117, 248, 267, 269, 266, 112},
                    {124, 250, 267, 263, 111},
                    {90, 249, 257, 254, 95, 89},//W

                    {303, 328, 342, 254, 184},//X
                    {303, 332, 347, 342, 255, 187},
                    {312, 341, 356, 352, 264, 193},
                    {246, 265, 269, 263, 191, 149},
                    {246, 263, 272, 262, 190, 148},
                    {245, 264, 259, 192, 148},
                    {241, 262, 240, 190, 147},
                    {245, 259, 239, 190, 146},
                    {241, 260, 243, 189, 146},
                    {237, 261, 258, 191, 147},
                    {240, 259, 259, 188, 146},
                    {231, 258, 261, 186, 144},
                    {239, 256, 269, 185, 145},
                    {241, 261, 280, 283, 181, 143},
                    {240, 262, 281, 282, 182, 144},
                    {240, 260, 278, 277, 279, 180, 143},
                    {238, 257, 272, 272, 178, 141},
                    {233, 254, 263, 261, 174, 142},
                    {233, 249, 255, 173, 141},
                    {230, 246, 242, 173, 139},
                    {233, 245, 240, 172, 138, 127},
                    {233, 247, 240, 174, 138, 126},
                    {229, 240, 173, 140, 127},
                    {222, 237, 171, 137, 127},
                    {227, 247, 241, 172, 136, 126},
                    {225, 247, 243, 171, 136, 126},
                    {219, 246, 253, 242, 171, 137, 125},
                    {219, 244, 240, 171, 166, 137, 126},
                    {221, 241, 238, 169, 136, 124},
                    {224, 243, 239, 170, 137, 124},
                    {220, 241, 237, 167, 135, 126},
                    {222, 247, 255, 245, 173, 168, 138, 126},
                    {228, 248, 246, 174, 138, 127},
                    {220, 246, 255, 244, 174, 138, 125},
                    {227, 246, 254, 244, 173, 167, 136, 125},
                    {231, 246, 244, 173, 136, 124},
                    {222, 245, 255, 243, 172, 136, 124},
                    {223, 243, 172, 136, 124},
                    {233, 246, 243, 172, 135, 123},
                    {227, 244, 252, 242, 170, 135, 123},
                    {219, 244, 240, 171, 166, 137, 126},
                    {221, 241, 238, 169, 136, 124},
                    {224, 243, 239, 170, 137, 124},
                    {220, 241, 237, 167, 135, 126},
                    {222, 247, 255, 245, 173, 168, 138, 126},
                    {228, 248, 246, 174, 138, 127},
                    {220, 246, 255, 244, 174, 138, 125},
                    {227, 246, 254, 244, 173, 167, 136, 125},
                    {231, 246, 244, 173, 136, 124},
                    {233, 246, 243, 172, 135, 123},//X

                    {193, 233, 342, 134, 127},//Y
                    {199, 231, 342, 133, 127},
                    {268, 348, 341, 136},
                    {259, 348, 137},
                    {263, 352},
                    {243, 319},
                    {232, 307},
                    {240, 310, 122},
                    {219, 360, 173},
                    {220, 383, 190},
                    {223, 388, 359, 194},
                    {228, 390, 370, 191, 181},
                    {231, 391, 192},
                    {238, 408, 401, 194},
                    {275, 354, 318, 139},
                    {272, 354, 367, 330, 140},
                    {281, 356, 330, 145},
                    {278, 355, 142},
                    {277, 339, 141},
                    {245, 339, 314, 142},
                    {243, 338, 307, 142},
                    {243, 266, 339, 307, 140},
                    {266, 339, 311, 139},
                    {267, 339, 308, 140},
                    {267, 339, 333, 306, 139, 134},
                    {267, 338, 333, 311, 142},
                    {265, 337, 311, 141},
                    {263, 335, 306, 139},
                    {237, 264, 334, 307, 140},
                    {242, 261, 331, 138},
                    {237, 261, 331, 324, 138},
                    {235, 261, 331, 302, 138},
                    {236, 330, 136},
                    {240, 258, 330, 135},
                    {250, 320, 130},
                    {237, 303, 123},
                    {227, 294, 118},
                    {223, 290},
                    {205, 271},
                    {193, 247},
                    {202, 251, 227, 106},
                    {213, 291, 135},
                    {209, 304, 273, 140, 124},
                    {215, 307, 139},
                    {215, 326, 289, 150},
                    {182, 324, 304},
                    {220, 335, 157},
                    {221, 341, 311, 164},
                    {268, 348, 341, 136},
                    {259, 348, 137},//Y
                    };

    static private double[][] AValues = {{151, 244, 53, 46},
            {188, 204, 75, 55, 68},
            {163, 198, 44, 50, 39},
            {167, 252, 49, 65},
            {163, 172, 53, 113},
    };

    static private double[][] BValues = {{139, 78, 72, 45, 65, 164},
            {24, 119, 30, 44, 68, 50, 60, 183},
            {148, 21, 49, 70, 50, 59, 157, 21},
            {144, 70, 72, 50, 56, 187},
            {148, 73, 70, 51, 57, 156, 25},
    };

    static private double[][] CValues = {{404, 58, 36, 26, 85, 27, 131},
            {84, 265, 31, 38, 96, 134},
            {285, 41, 36, 110, 25, 135, 206},
            {107, 278, 35, 34, 105, 26, 126, 219},
            {82, 265, 61, 93, 133},
    };

    static private double[][] DValues = {{238, 261, 53, 41},
            {74, 144, 39, 219, 45, 36},
            {249, 269, 51},
            {254, 282, 51, 57},
            {195, 226, 43, 29},
    };

    static private double[][] EValues = {{96, 35, 105, 75, 107, 34},
            {92, 122, 56, 98, 24},
            {86, 120, 58, 90},
            {74, 25, 28, 92, 53, 100, 23},
            {168, 40, 57, 121, 118, 115, 50},
    };

    static private double[][] FValues = {{349, 57, 63, 158, 34},
            {31, 122, 187, 49, 62, 27, 162},
            {38, 125, 186, 57, 69, 25, 122, 27},
            {40, 117, 170, 60, 65, 30, 126, 36},
            {61, 270, 50, 72, 32, 123, 27},
            {332, 56, 66, 28, 122, 35},
            {132, 210, 53, 59, 187},
            {56, 255, 60, 67, 22, 126, 42},
    };

    static private double[][] GValues = {{187, 175, 69, 109, 65, 224},
            {187, 166, 58, 121, 74, 248},
            {179, 73, 105, 83, 228},
            {187, 70, 106, 74, 210},
            {188, 166, 70, 113, 66, 213, 50},
            {188, 52, 110, 68, 192},
            {163, 69, 101, 67, 198, 45},
            {183, 155, 80, 106, 91, 21, 244, 51},
            {179, 138, 63, 35, 111, 86, 24, 263, 52},
    };

    static private double[][] HValues = {{50, 59, 77, 52, 108, 58, 33, 49, 239},
            {105, 88, 49, 117, 68, 31, 68, 257},
            {72, 87, 60, 102, 72, 81, 259},
            {163, 162, 27, 40, 114, 71, 73, 253},
            {171, 166, 21, 35, 119, 75, 25, 49, 253},
            {172, 35, 77, 104, 37, 105, 58, 91},
            {181, 26, 147, 66, 109, 74, 32, 72, 256},
            {181, 26, 28, 111, 73, 106, 64, 34, 58, 261},
            {23, 86, 77, 50, 112, 58, 80, 247},
            {119, 97, 40, 105, 58, 90},
    };

    static private double[][] IValues = {{94, 161, 183, 25, 21, 50, 22},
            {84, 155, 179, 23, 69, 27},
            {83, 157, 179, 96, 27},
            {84, 159, 179, 44, 67},
            {86, 158, 179, 94, 32},
            {102, 246, 317},
            {104, 243, 287, 28},
            {101, 233, 276, 31},
            {96, 30, 203, 278, 31},
            {78, 192, 223},
    };

    static private double[][] MValues = {{42, 25, 118, 92, 61, 63, 36},
            {49, 26, 45, 53, 106, 70, 65, 68},
            {41, 30, 99, 106, 68, 65, 66},
            {66, 115, 103, 69, 65, 66},
            {43, 27, 97, 27, 88, 70, 67, 71}
    };

    static private double[][] RValues = {{238, 59, 212, 30, 40},
            {236, 60, 214, 28, 36, 20},
            {239, 66, 210, 26, 41},
            {236, 65, 206, 48, 20},
            {236, 57, 215, 36, 33},
            {238, 61, 210, 36, 27, 28},
            {238, 63, 204, 40, 25},
    };

    static private double[][] YValues = {{332},
            {338},
            {319},
            {308, 36},
    };

    static private String[] alphabetValues = new String[values.length];
    private double[] valueFingers, valueBetweenFingers;
    private String gesture = "Hello", previousGesture = "Hello";

    /*
	 * for finger detection
	 */
    Mat mRgba, hsvMat, hsvMatApplied, contourMat, lines;
    private static final int MAX_POINTS = 40;
    private int contourAxisAngle;
    private Point cogPt = new Point(); // center of gravity (COG) of contour
    private ArrayList<Point> fingerTips = new ArrayList<Point>();
    private Point[] tipPts, endPts, foldPts;
    private float[] depths;
    private int division = 5;

    private static final int MIN_FINGER_DEPTH = 1;
    private static final int MAX_FINGER_DEPTH = 2000;
    private static final int MAX_FINGER_ANGLE = 120; // degrees
    private static final int MIN_FINGER_ANGLE = 10; // degrees
    private static final int MAX_FINGER_DISTANCE = 20;
	/*
	 *
	 */


    BaseLoaderCallback mLoaderCallBack = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {
            switch (status) {
                case BaseLoaderCallback.SUCCESS: {
                    javaCameraView.enableView();
                    break;
                }
                default: {
                    super.onManagerConnected(status);
                    break;
                }
            }
        }
    };

    Button button, button2;
    TextView textView, textView2;
    ImageView imageView;
    ConstraintLayout cc;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

        button = (Button) findViewById(R.id.button);
        button2 = (Button) findViewById(R.id.button2);
        textView = (TextView) findViewById(R.id.textView);
        textView2 = (TextView) findViewById(R.id.textView2);
        imageView = (ImageView) findViewById(R.id.imageView);
        cc = (ConstraintLayout) findViewById(R.id.cc);

        cc.setVisibility(View.GONE);
        button.setVisibility(View.GONE);
        button2.setVisibility(View.GONE);
        textView.setVisibility(View.GONE);
        textView2.setVisibility(View.GONE);
        imageView.setVisibility(View.GONE);

        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cc.setVisibility(View.GONE);
                button.setVisibility(View.GONE);
                button2.setVisibility(View.GONE);
                textView.setVisibility(View.GONE);
            }
        });

        button2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onBackPressed();
            }
        });
        try {
            mBuilder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);
            mSession.setRepeatingRequest(mBuilder.build(), null, null);
        } catch (Exception e) {
            e.printStackTrace();
        }

        javaCameraView = (JavaCameraView)findViewById(R.id.java_camera_view);
        javaCameraView.setVisibility(SurfaceView.VISIBLE);
        javaCameraView.setCvCameraViewListener(this);
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocas) {
        super.onWindowFocusChanged(hasFocas);
        View decorView = getWindow().getDecorView();
        if(hasFocas) {
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    | View.SYSTEM_UI_FLAG_FULLSCREEN
                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
        }
    }

    private void extractContourInfo(MatOfPoint bigContour, int scale) {
        Moments moments = Imgproc.moments(bigContour);

        // Centre of gravity
        double m00 = moments.m00;
        double m10 = moments.m10;
        double m01 = moments.m01;

        if (m00 != 0) { // calculate center
            double xCenter = Math.round(m10 / m00) * scale;
            double yCenter = Math.round(m01 / m00) * scale;
            cogPt.x = xCenter;
            cogPt.y = yCenter;
        }

        double m11 = moments.m11;
        double m20 = moments.m20;
        double m02 = moments.m02;
        contourAxisAngle = calculateTilt(m11, m20, m02);

        // deal with hand contour pointing downwards
			/*
			 * uses fingertips information generated on the last update of the
			 * hand, so will be out-of-date
			 */

        if (fingerTips.size() > 0) {
            int yTotal = 0;
            for (Point pt : fingerTips)
                yTotal += pt.y;
            int avgYFinger = yTotal / fingerTips.size();
            if (avgYFinger > cogPt.y) // fingers below COG
                contourAxisAngle += 180;
        }
        contourAxisAngle = 180 - contourAxisAngle;
			/*
			 * this makes the angle relative to a positive y-axis that runs up
			 * the screen
			 */
    } // end of extractContourInfo()

    private int calculateTilt(double m11, double m20, double m02) {
        double diff = m20 - m02;
        if (diff == 0) {
            if (m11 == 0)
                return 0;
            else if (m11 > 0)
                return 45;
            else // m11 < 0
                return -45;
        }

        double theta = 0.5 * Math.atan2(2 * m11, diff);
        int tilt = (int) Math.round(Math.toDegrees(theta));

        if ((diff > 0) && (m11 == 0))
            return 0;
        else if ((diff < 0) && (m11 == 0))
            return -90;
        else if ((diff > 0) && (m11 > 0)) // 0 to 45 degrees
            return tilt;
        else if ((diff > 0) && (m11 < 0)) // -45 to 0
            return (180 + tilt); // change to counter-clockwise angle
        else if ((diff < 0) && (m11 > 0)) // 45 to 90
            return tilt;
        else if ((diff < 0) && (m11 < 0)) // -90 to -45
            return (180 + tilt); // change to counter-clockwise angle

        System.out.println("Error in moments for tilt angle");
        return 0;
    } // end of calculateTilt()

    private void findFingerTips(MatOfPoint approxContour, int scale) {

        MatOfInt hull = new MatOfInt();

        Imgproc.convexHull(approxContour, hull, false);
        // find the convex hull around the contour

        MatOfInt4 defects = new MatOfInt4();
        Imgproc.convexityDefects(approxContour, hull, defects);

        int defectsTotal = (int) defects.total();
        if (defectsTotal > MAX_POINTS) {
            defectsTotal = MAX_POINTS;
        }

        tipPts = new Point[defectsTotal];
        endPts = new Point[defectsTotal];
        foldPts = new Point[defectsTotal];
        depths = new float[defectsTotal];
        // copy defect information from defects sequence into arrays
        for (int i = 0; i < defectsTotal; i++) {
            double[] dat = defects.get(i, 0);

            double[] startdat = approxContour.get((int) dat[0], 0);
            Point startPt = new Point(startdat[0], startdat[1]);
            tipPts[i] = startPt;
            // array contains coords of the fingertips

            double[] enddat = approxContour.get((int) dat[1], 0);
            Point endPt = new Point(enddat[0], enddat[1]);
            endPts[i] = endPt;

            double[] depthdat = approxContour.get((int) dat[2], 0);
            Point depthPt = new Point(depthdat[0], depthdat[1]);
            foldPts[i] = depthPt;
            // array contains coords of the skin fold between fingers

            depths[i] = (float) dat[3];
            // array contains distances from tips to folds
        }

        reduceTips(defectsTotal, tipPts, endPts, foldPts, depths);
    } // end of findFingerTips()

    private void reduceTips(int numPoints, Point[] tipPts, Point[] endPts, Point[] foldPts, float[] depths) {
        fingerTips.clear();

        for (int i = 0; i < numPoints; i++) {
            // this point is probably a fingertip, so add to list
            if (i > 0) {
                if ((abs(tipPts[i].x - tipPts[i - 1].x)) < MAX_FINGER_DISTANCE
                        && (abs(tipPts[i].y - tipPts[i - 1].y) < MAX_FINGER_DISTANCE)) {
                    continue;
                }
            }
            if (i == (numPoints - 1)) {
                if ((abs(tipPts[numPoints - 1].x - tipPts[0].x)) < MAX_FINGER_DISTANCE
                        && (abs(tipPts[numPoints - 1].y - tipPts[0].y) < MAX_FINGER_DISTANCE)) {
                    continue;
                }
            }
            if (tipPts[i].x < mRgba.width()/division) {
                continue;
            }
            if (tipPts[i].x > (division - 1)*mRgba.width()/division) {
                continue;
            }
            //if (angle(tipPts[i]) < 90) {
            //    continue;
            //}

            fingerTips.add(tipPts[i]);
        }
    } // end of reduceTips()

    private int angle(Point tip)
    // calculate the angle between the tip and its neighbouring folds
    // (in integer degrees)
    {
        return abs((int) Math.round(Math.toDegrees(Math.atan2(tip.x, tip.y - ((2*mRgba.height())/3)))));
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (javaCameraView != null) {
            javaCameraView.disableView();
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (javaCameraView != null) {
            javaCameraView.disableView();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (OpenCVLoader.initDebug()) {
            Log.i(TAG, "OpenCV Loaded Successfully");
            mLoaderCallBack.onManagerConnected(LoaderCallbackInterface.SUCCESS);
        }
        else {
            Log.i(TAG, "OpenCV Not Loaded Successfully");
            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_2_0, this, mLoaderCallBack);
        }
    }

    @Override
    public void onCameraViewStarted(int width, int height) {
        mRgba = new Mat(height, width, CvType.CV_8UC4);
        hsvMat = new Mat(height, width, CvType.CV_8UC4);
        hsvMatApplied = new Mat(height, width, CvType.CV_8UC4);
        contourMat = new Mat(hsvMatApplied.rows(), hsvMatApplied.cols(), CvType.CV_8UC1);
    }

    @Override
    public void onCameraViewStopped() {
        mRgba.release();
        contourMat.release();
    }

    @Override
    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {
        mRgba = inputFrame.rgba();

        Mat mRgbaT = mRgba.t();
        Core.flip(mRgba.t(), mRgbaT, 1);
        Imgproc.resize(mRgbaT, mRgbaT, mRgba.size());

        Imgproc.blur(mRgba, mRgba, new Size(7, 7));
        Imgproc.cvtColor(mRgba, hsvMat, Imgproc.COLOR_BGR2HSV);

        Scalar hsvMin = new Scalar(95, 10, 100);
        Scalar hsvMax = new Scalar(133, 142, 232);

        System.out.println(hsvMat.get(mRgba.height()/2, mRgba.width()/2));

        double minHue, minSaturation, minValue, maxHue, maxSaturation, maxValue, tempHue = 30, tempSaturation = 80, tempValue = 100;

        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0] > tempHue) {
            minHue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0] - tempHue;
        }
        else {
            minHue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0];
        }
        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1] > tempSaturation) {
            minSaturation = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1] - tempSaturation;
        }
        else {
            minSaturation = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1];
        }
        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2] > tempValue) {
            minValue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2] - tempValue;
        }
        else {
            minValue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2];
        }
        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0] < (255 - tempHue)) {
            maxHue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0] + tempHue;
        }
        else {
            maxHue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[0];
        }
        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1] < (255 - tempSaturation)) {
            maxSaturation = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1] + tempSaturation;
        }
        else {
            maxSaturation = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[1];
        }
        if (hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2] < (255 - tempValue)) {
            maxValue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2] + tempValue;
        }
        else {
            maxValue = hsvMat.get(mRgba.height()/2, mRgba.width()/2)[2];
        }

        //Scalar hsvMin = new Scalar(minHue, minSaturation, minValue);
        //Scalar hsvMax = new Scalar(maxHue, maxSaturation, maxValue);

        Core.inRange(hsvMat, hsvMin, hsvMax, hsvMatApplied);
        Imgproc.blur(hsvMatApplied, hsvMatApplied, new Size(1, 1));
        Mat dilateElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(1, 1));
        Mat erodeElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(1, 1));
        Imgproc.erode(hsvMatApplied, hsvMatApplied, erodeElement);
        Imgproc.dilate(hsvMatApplied, hsvMatApplied, dilateElement);
        Imgproc.blur(hsvMatApplied, hsvMatApplied, new Size(1, 1));

        contourMat = new Mat(hsvMatApplied.rows(), hsvMatApplied.cols(), CvType.CV_8UC1);

        // MatOfPoint contourMat = new MatOfPoint();
        List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        Mat hierarchy = new Mat();
        Imgproc.findContours(hsvMatApplied, contours, hierarchy, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);

        double maxVal = 0;
        int maxValIdx = 0;

        for (int contourIdx = 0; contourIdx < contours.size(); contourIdx++) {
            double contourArea = Imgproc.contourArea(contours.get(contourIdx));
            if (maxVal < contourArea) {
                maxVal = contourArea;
                maxValIdx = contourIdx;
            }
        }

        Imgproc.drawContours(contourMat, contours, maxValIdx, new Scalar(255, 255, 255), -1);
        // System.out.println(contourMat);

        if (maxValIdx > 0) {

            MatOfPoint bigContour = contours.get(maxValIdx);

            extractContourInfo(bigContour, 1);
            // find the COG and angle to horizontal of the contour

            findFingerTips(bigContour, 1);
            // detect the fingertips positions in the contour

            for (int i = 0; i < alphabetValues.length; i++) {
                if (i < 50) {
                    alphabetValues[i] = "A";
                }
                else if (i >= 50 && i < 100){
                    alphabetValues[i] = "B";
                }
                else if (i >= 100 && i < 150){
                    alphabetValues[i] = "C";
                }
                else if (i >= 150 && i < 200){
                    alphabetValues[i] = "D";
                }
                else if (i >= 200 && i < 250){
                    alphabetValues[i] = "E";
                }
                else if (i >= 250 && i < 300){
                    alphabetValues[i] = "F";
                }

                else if (i >= 300 && i < 350){
                    alphabetValues[i] = "G";
                }
                else if (i >= 350 && i < 400){
                    alphabetValues[i] = "H";
                }
                else if (i >= 400 && i < 450){
                    alphabetValues[i] = "I";
                }
                else if (i >= 450 && i < 500){
                    alphabetValues[i] = "J";
                }
                else if (i >= 500 && i < 550){
                    alphabetValues[i] = "K";
                }
                else if (i >= 550 && i < 600){
                    alphabetValues[i] = "I";
                }
                else if (i >= 600 && i < 650){
                    alphabetValues[i] = "M";
                }
                else if (i >= 650 && i < 700){
                    alphabetValues[i] = "N";
                }
                else if (i >= 700 && i < 750){
                    alphabetValues[i] = "O";
                }
                else if (i >= 750 && i < 800){
                    alphabetValues[i] = "P";
                }
                else if (i >= 800 && i < 850){
                    alphabetValues[i] = "Q";
                }
                else if (i >= 850 && i < 900){
                    alphabetValues[i] = "R";
                }
                else if (i >= 900 && i < 950){
                    alphabetValues[i] = "S";
                }

            }


            valueFingers = new double[fingerTips.size()];
            valueBetweenFingers = new double[fingerTips.size()];

            lines = mRgba;
            if (contourMat.height() > 0 && contourMat.width() > 0 && fingerTips.size() != 0) {
                for (int i = 0; i < fingerTips.size(); i++) {

                    Point center = new Point(mRgba.width()/2, mRgba.height()/2);
                    Point topLeft = new Point(mRgba.width()/division, 0);
                    Point topRight = new Point(mRgba.width()/division, mRgba.height());
                    Point bottomLeft = new Point((division - 1)*mRgba.width()/division, 0);
                    Point bottomRight = new Point((division - 1)*mRgba.width()/division, mRgba.height());
                    Imgproc.circle(lines, center, 5, new Scalar(0, 0, 0));
                    Imgproc.line(lines, topLeft, topRight, new Scalar(0, 0, 0), 4);
                    Imgproc.line(lines, bottomLeft, bottomRight, new Scalar(0, 0, 0), 4);

                    Point pt1 = fingerTips.get(i);
                    Imgproc.line(lines, cogPt, pt1, new Scalar(255, 0, 0), 4);
                    Imgproc.circle(lines, pt1, 16, new Scalar(255, 204, 0));
                    if (i > 0) {
                        Point pt2 = fingerTips.get(i - 1);
                        Imgproc.line(lines, pt2, pt1, new Scalar(0, 255, 0), 2);
                        valueBetweenFingers[i - 1] = (Math.sqrt(Math.pow((pt1.x - pt2.x), 2) + Math.pow((pt1.y - pt2.y), 2)));
                        //Log.i("Myapp", Integer.toString(i - 1) + "   " + Integer.toString((int)valueBetweenFingers[i - 1]) + "+");
                    }
                    valueFingers[i] = (Math.sqrt(Math.pow((pt1.x - cogPt.x), 2) + Math.pow((pt1.y - cogPt.y), 2)));
                    Log.i("Myapp", Integer.toString(i) + "   " + Integer.toString((int)valueFingers[i]) + "=");
                    //System.out.println("Myapp" + "  " + Integer.toString(i) + "   " + Double.toString(abs(valueFingers[i])));
                }
                Imgproc.circle(lines, cogPt, 90, new Scalar(0, 0, 255));
            }

            runOnUiThread(new Runnable() {
                public void run() {
                    for (int i = 0; i < values.length; i++) {
                        boolean same = true;
                        if (values[i].length == valueFingers.length) {
                            for (int j = 0; j < valueFingers.length; j++) {
                                if (valueFingers[j] <= (values[i][j] + 20) && valueFingers[j] >= (values[i][j] - 20)) {
                                    same &= true;
                                } else {
                                    same &= false;
                                }
                            }
                            if (same == true) {
                                Log.i("Myapp", "------------" + gesture + "-------------");
                            }
/*
                            if (same == true && (new String(alphabetValues[i]).equals("A"))){
                                for (int a = 0; a < AValues.length; a++){
                                    if (AValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (AValues[a][b] +100) && valueBetweenFingers[b] >= (AValues[a][b] -100)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
*/
                            else if (same == true && (new String(alphabetValues[i]).equals("D"))){
                                for (int a = 0; a < DValues.length; a++){
                                    if (DValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (DValues[a][b] +50) && valueBetweenFingers[b] >= (DValues[a][b] -50)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
                            /*
                            else if (same == true && (new String(alphabetValues[i]).equals("E"))){
                                for (int a = 0; a < EValues.length; a++){
                                    if (EValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (EValues[a][b] +50) && valueBetweenFingers[b] >= (EValues[a][b] -50)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
                            */
                            else if (same == true && (new String(alphabetValues[i]).equals("I"))){
                                for (int a = 0; a < IValues.length; a++){
                                    if (IValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (IValues[a][b] +50) && valueBetweenFingers[b] >= (IValues[a][b] -50)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (same == true && (new String(alphabetValues[i]).equals("M"))){
                                for (int a = 0; a < MValues.length; a++){
                                    if (MValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (MValues[a][b] +5) && valueBetweenFingers[b] >= (MValues[a][b] -5)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (same == true && (new String(alphabetValues[i]).equals("R"))){
                                for (int a = 0; a < RValues.length; a++){
                                    if (RValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (RValues[a][b] +50) && valueBetweenFingers[b] >= (RValues[a][b] -50)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (same == true && (new String(alphabetValues[i]).equals("Y"))){
                                for (int a = 0; a < YValues.length; a++){
                                    if (YValues[a].length == valueBetweenFingers.length){
                                        for (int b = 0; b < valueBetweenFingers.length; b++){
                                            if (valueBetweenFingers[b] <= (YValues[a][b] +50) && valueBetweenFingers[b] >= (YValues[a][b] -50)) {
                                                same &= true;
                                            }
                                            else {
                                                same &= false;
                                            }
                                        }
                                    }
                                }
                            }

                            gesture = alphabetValues[i];

                            if (same == true && !(new String(gesture).equals(previousGesture))) {


                                previousGesture = gesture;
                                button.setVisibility(View.VISIBLE);
                                button2.setVisibility(View.VISIBLE);
                                textView.setVisibility(View.VISIBLE);
                                cc.setVisibility(View.VISIBLE);

                                if( gesture.equals("A") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate A to ㄱ");
                                    imageView.setImageResource(R.drawable.a);


                                } else if( gesture.equals("B") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate B to ㄴ ");
                                    imageView.setImageResource(R.drawable.b);


                                } else if( gesture.equals("C") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate C to ㄷ");
                                    imageView.setImageResource(R.drawable.c);

                                } else if( gesture.equals("D") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate D to 모두");
                                    imageView.setImageResource(R.drawable.d);

                                } else if( gesture.equals("E") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate E to 사랑합니다");
                                    imageView.setImageResource(R.drawable.e);

                                } else if( gesture.equals("F") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate F to 수고하셨습니다");
                                    imageView.setImageResource(R.drawable.f);

                                } else if( gesture.equals("G") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate G to 하나");
                                    imageView.setImageResource(R.drawable.one);

                                } else if( gesture.equals("H") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate H to 둘");
                                    imageView.setImageResource(R.drawable.two);

                                } else if( gesture.equals("I") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate I to 셋");
                                    imageView.setImageResource(R.drawable.three);

                                } else if( gesture.equals("J") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate J to 넷");
                                    imageView.setImageResource(R.drawable.four);

                                } else if( gesture.equals("K") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate K to 다섯");
                                    imageView.setImageResource(R.drawable.five);

                                } else if( gesture.equals("L") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate L to 여섯");
                                    imageView.setImageResource(R.drawable.six);

                                } else if( gesture.equals("M") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate M to 일곱");
                                    imageView.setImageResource(R.drawable.seven);

                                } else if( gesture.equals("N") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate N to 여덟");
                                    imageView.setImageResource(R.drawable.eight);

                                } else if( gesture.equals("O") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate O to 아홉");
                                    imageView.setImageResource(R.drawable.nine);

                                } else if( gesture.equals("P") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate P to 열");
                                    imageView.setImageResource(R.drawable.ten);

                                } else if( gesture.equals("Q") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate Q to ㅏ");
                                    imageView.setImageResource(R.drawable.ah);

                                } else if( gesture.equals("R") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate Q to ㅓ");
                                    imageView.setImageResource(R.drawable.u);

                                } else if( gesture.equals("S") ) {
                                    textView2.setVisibility(View.VISIBLE);
                                    imageView.setVisibility(View.VISIBLE);

                                    textView2.setText("Translate Q to ㅗ");
                                    imageView.setImageResource(R.drawable.oh);

                                } else {
                                    // 이게 토스트 뜨는 코드야
                                    Toast.makeText(MainActivity.this, alphabetValues[i], Toast.LENGTH_LONG).show();
                                }

                                break;
                            }

                        }
                    }
                }
            });

        }
        return mRgba;
    }
}

/*
            runOnUiThread(new Runnable() {
                int k = 0;
                public void run() {
                    for (int i = 0; i < difference.length; i++) {
                        difference[i] = 0;
                        alphabetDifference[i] = "Hello";
                    }
                    for (int i = 0; i < values.length; i++) {
                        if (values[i].length == valueFingers.length) {
                            for (int j = 0; j < valueFingers.length; j++) {
                                difference[k] += (values[i][j] - valueFingers[j]);
                                alphabetDifference[k] = alphabetValues[i];
                            }
                            //Log.i("Myapp", alphabetDifference[k] + Double.toString(difference[k]));
                            k++;
                        }
                    }
                    double smallestValue = 99999;
                    String smallestAlphabet = "Hello";
                    for (int i = 0; i < difference.length; i++) {
                        if (difference[i] < smallestValue && difference[i] > 0) {
                            smallestValue = difference[i];
                            smallestAlphabet = alphabetDifference[i];
                        }
                    }
                    gesture = smallestAlphabet;
                    if (!(new String(gestureAfter).equals(gesture)) && smallestValue < 500) {
                        Log.i("Myapp", smallestAlphabet + Double.toString(smallestValue));
                        gestureAfter = gesture;
                        Toast.makeText(MainActivity.this, smallestAlphabet, Toast.LENGTH_SHORT).show();
                    }
                }
            });
*/